
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // `users` collection
    match /users/{userId} {
      // Allow user to create their own profile
      allow create: if isUser(userId);

      // A user can read another user's profile if they are signed in.
      // We will restrict sensitive fields in the client.
      // OR, more securely: if they are friends or have a pending request.
      allow read: if isSignedIn() && 
                    (
                      // Allow reading own full profile
                      isUser(userId) ||
                      // Allow reading public profiles of friends
                      resource.data.friends.has(request.auth.uid) ||
                      // Allow reading public profiles of those who sent you a request
                      resource.data.friendRequestsReceived.has(request.auth.uid) ||
                      // Allow reading profiles that you have sent requests to
                      resource.data.friendRequestsSent.has(request.auth.uid) ||
                      // Allow any signed-in user to read limited, public data
                      // This rule will allow the discover page to work
                      !isUser(userId)
                    );

      // Allow user to update only their own profile
      allow update: if isUser(userId);
      
      // Allow user to delete their own profile
      allow delete: if isUser(userId);
    }

    // `chats` collection
    match /chats/{chatId} {
      // A user can read a chat if their ID is in the chatId
      allow read: if isSignedIn() && request.auth.uid in chatId.split('_');

      // A user can write to a chat (create messages) if their ID is in the chatId
      // Note: This allows creating the chat document itself via a message write
      allow write: if isSignedIn() && request.auth.uid in chatId.split('_');

      match /messages/{messageId} {
        // Allow read if user is part of the chat
        allow read: if isSignedIn() && request.auth.uid in chatId.split('_');
        
        // Allow creating messages if user is part of the chat and is the sender
        allow create: if isSignedIn() && 
                      request.auth.uid in chatId.split('_') &&
                      request.resource.data.senderId == request.auth.uid;

        // Disallow updating/deleting messages for simplicity
        allow update, delete: if false;
      }
    }

    // `pings` collection
    match /pings/{pingId} {
        // Anyone signed in can create a ping
        allow create: if isSignedIn();
        
        // No one can read, update, or delete pings after they are created
        allow read, update, delete: if false;
    }
  }
}
