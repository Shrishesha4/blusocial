
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      // Allow read access to a user's own document, their friends' documents, or documents of users who sent them a friend request.
      allow read: if isSignedIn() && 
                    (isOwner(userId) || 
                     userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friends ||
                     userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.friendRequestsReceived);
      
      // A user can create their own profile, and can only update their own profile.
      // No one can delete a user document directly; this must be handled by a server-side function.
      allow create, update: if isOwner(userId);
      allow delete: if false;
    }

    // Chats collection
    match /chats/{chatId} {
      // Chat ID is formatted as 'userId1_userId2'
      function isChatMember() {
        return request.auth.uid in chatId.split('_');
      }
      
      allow read, write: if isSignedIn() && isChatMember();
      
      // Messages subcollection
      match /messages/{messageId} {
        // Only chat members can read/write messages
        allow read, write: if isSignedIn() && isChatMember();
      }
    }

    // Pings collection
    match /pings/{pingId} {
      // Any signed in user can create a ping.
      allow create: if isSignedIn();
      // Pings are write-once, they cannot be read or updated after creation.
      allow read, update, delete: if false;
    }
  }
}
